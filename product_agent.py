import os
import json
import chromadb
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI
from dotenv import load_dotenv


load_dotenv() # –ó–∞–≥—Ä—É–∂–∞–µ—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

class ProductBot:
    def __init__(self):
        self.openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        self.chroma_client = chromadb.PersistentClient(path="./chroma_db")
    
    def analyze_query(self, user_message):
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∏.
        
        –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: headphones, smartphones, smartwatches, laptops, robot_vacuums
        
        –ó–∞–ø—Ä–æ—Å: "{user_message}"
        
        –û—Ç–≤–µ—Ç—å JSON:
        {{"category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ null", "search_query": "—É–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"}}
        """
        
        try:
            response = self.openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.1,
                max_tokens=100
            )
            
            result = json.loads(response.choices[0].message.content)
            return result.get('category'), result.get('search_query', user_message)
            
        except Exception as e:
            print(f"OpenAI –æ—à–∏–±–∫–∞: {e}")
            return None, user_message
    
    def search_products(self, query, category=None):
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ ChromaDB"""
        try:
            if category:
                collection = self.chroma_client.get_collection(f"darwin_{category}")
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—â–µ–º –≤ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞—Ö
                collection = self.chroma_client.get_collection("darwin_smartphones")
            
            results = collection.query(
                query_texts=[query],
                n_results=3
            )
            
            products = []
            for i in range(len(results['documents'][0])):
                product = {
                    'name': results['metadatas'][0][i]['name'],
                    'price': results['metadatas'][0][i]['price'],
                    'description': results['metadatas'][0][i]['description']
                }
                products.append(product)
            
            return products
            
        except Exception as e:
            print(f"–ü–æ–∏—Å–∫ –æ—à–∏–±–∫–∞: {e}")
            return []

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = ProductBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    message = """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Darwin Store!

–Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É —Ç–µ—Ö–Ω–∏–∫–∏:
–ù–∞—É—à–Ω–∏–∫–∏
–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã  
–£–º–Ω—ã–µ —á–∞—Å—ã
–ù–æ—É—Ç–±—É–∫–∏
–†–æ–±–æ—Ç—ã-–ø—ã–ª–µ—Å–æ—Å—ã

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –∏—â–µ—Ç–µ!
"""
    await update.message.reply_text(message)

async def search_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞"""
    user_query = update.message.text
    
    await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ OpenAI
    category, improved_query = bot.analyze_query(user_query)
    
    # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã
    products = bot.search_products(improved_query, category)
    
    if products:
        response = f"–ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{user_query}'\n\n"
        
        for i, product in enumerate(products, 1):
            response += f"{i}. {product['name']}\n"
            response += f"üí∞ {product['price']} –ª–µ–π\n"
            response += f"üìù {product['description']}\n\n"
        
    else:
        response = "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
    
    await update.message.reply_text(response)

def main():

    token = os.getenv("TELEGRAM_BOT_TOKEN")
    
    if not token:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ .env")
        return
    
    app = Application.builder().token(token).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_handler))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()